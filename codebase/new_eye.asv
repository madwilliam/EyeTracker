ImageEye_grey = rgb2gray(ImageEye*10);


ImageEye_grey = rgb2gray(histeq(ImageEye));
[ImageEye_grey] = remove_light_reflection(i,ImageEye_grey,eye_dlc_output,xybias);
ImageEye_grey = imcomplement(ImageEye_grey);

fi = imgaussfilt(ImageEye_grey);

level = graythresh(ImageEye_grey);
BW = imbinarize(ImageEye_grey,level);

[N,edges] = histcounts(ImageEye_grey,60);

threshold = adaptthresh(ImageEye_grey,0.1);
BW = imbinarize(ImageEye_grey,threshold);
dist = bwdist(~BW);
mask = dist>0.1;
X = [eye_dlc_output.Px1(ind),eye_dlc_output.Px2(ind),eye_dlc_output.Px3(ind),eye_dlc_output.Px4(ind),eye_dlc_output.Px5(ind),eye_dlc_output.Px6(ind),eye_dlc_output.Px7(ind),eye_dlc_output.Px8(ind)]-biasx-2;
Y = [eye_dlc_output.Py1(ind),eye_dlc_output.Py2(ind),eye_dlc_output.Py3(ind),eye_dlc_output.Py4(ind),eye_dlc_output.Py5(ind),eye_dlc_output.Py6(ind),eye_dlc_output.Py7(ind),eye_dlc_output.Py8(ind)]-biasy+2;
X_avg = mean(X);
Y_avg = mean(Y);

J = histeq(ImageEye);

[epx, epy] = starburst_pupil_contour_detection(ImageEye_grey, X_avg, Y_avg, 6, 6,3);
%%
figure
%%
hold on
imagesc(ImageEye_grey)
scatter(epx, epy)
hold off
%%

%% start burst
[xsize,ysize,~] =size(image);
image = imgaussfilt(ImageEye,1);
radius = max([xsize,ysize]);
angles = linspace(0,pi,10);
slopes = tan(angles);
traces = cell(0);
i=1;
boundaries = zeros(2*numel(slopes),2);
for slopei = slopes
    last_flipped = flipped;
    flipped = false;
    to_flip = false;
    xis = 1:xsize;
    line_equation = @(x) slopei*x-slopei*X_avg+Y_avg;
    yis = line_equation(xis);
    yis = floor(yis);
    isvalid = arrayfun(@(x) x>0 && x <xsize,yis);
    if ~all(isvalid)
        yis = 1:ysize;
        line_equation = @(y) (y+slopei*X_avg-Y_avg)/slopei;
        xis = floor(line_equation(yis));
        flipped = true;
    end
    if last_flipped==true && flipped ==false&&to_flip==fals
        to_flip=true;
    end
    subs = sub2ind([xsize,ysize],yis,xis);
    trace = [yis',xis'];
    inds = sub2ind([xsize,ysize],trace(:,1),trace(:,2));
    line = double(image(inds));
    dif = abs(line(2:end)-line(1:end-1));
    [pks,locs] = findpeaks(dif,1:numel(dif),'MinPeakProminence',1);
    x_points = trace(:,2);
    y_points = trace(:,1);
    peak_to_center_difference = locs-(X_avg);
    peak_id = find(diff(sign(peak_to_center_difference)));
    start_point = locs(peak_id);
    end_point = locs(peak_id+1);
    if i==8
        disp('')
    end
    if to_flip
        boundaries(i,:) = [x_points(start_point),y_points(start_point)];
        boundaries(i+offset,:) = [x_points(end_point),y_points(end_point)];
    else
        boundaries(i,:) = [x_points(end_point),y_points(end_point)];
        boundaries(i+offset,:) = [x_points(start_point),y_points(start_point)];
    end
    i=i+1;
end
%%
boundaries = zeros(2*numel(traces),2);
offset = 10;
i=1;
for trace = traces
    trace = trace{1};
    inds = sub2ind([xsize,ysize],trace(:,1),trace(:,2));
    line = double(image(inds));
    dif = abs(line(2:end)-line(1:end-1));
    [pks,locs] = findpeaks(dif,1:numel(dif),'MinPeakProminence',1);
    x_points = trace(:,2);
    y_points = trace(:,1);
    peak_to_center_difference = locs-(X_avg);
    peak_id = find(diff(sign(peak_to_center_difference)));
    start_point = locs(peak_id);
    end_point = locs(peak_id+1);
    boundaries(i,:) = [x_points(start_point),y_points(start_point)];
    boundaries(i+offset,:) = [x_points(end_point),y_points(end_point)];
    i=i+1;
end
%%
% tracei = 3;
% trace = traces{tracei};
figure
hold on
imagesc(ImageEye_grey)
scatter(trace(:,1),trace(:,2),500,'r.')
hold off
%%
figure
% trace = traces{tracei};
inds = sub2ind([xsize,ysize],trace(:,1),trace(:,2));
line = double(image(inds));
dif = line(2:end)-line(1:end-1);
clf
hold on 
plot(trace(:,1),line)
plot(trace(1:end-1,1),abs(dif)*10)
hold off
%%
hold on 
plot(line)
plot(dif*10)
hold off
%%
figure
hold on
imagesc(ImageEye_grey)
scatter(boundaries(:,1),boundaries(:,2),500,'r.')
hold off
%%
figure
hold on
i=1;
imagesc(ImageEye_grey)
for pointi = boundaries'
    scatter(pointi(1),pointi(2),500,'r.')
    text(pointi(1),pointi(2),num2str(i),'FontSize',30)
    i=i+1;
end
hold off
%%
mask = poly2mask(boundaries(:,1),boundaries(:,2),xsize,ysize);